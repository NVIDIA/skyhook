/*
 * SPDX-FileCopyrightText: Copyright (c) 2025 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
 * SPDX-License-Identifier: Apache-2.0
 *
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package record

import (
	mock "github.com/stretchr/testify/mock"
	"k8s.io/apimachinery/pkg/runtime"
)

// NewEventRecorder creates a new instance of EventRecorder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEventRecorder(t interface {
	mock.TestingT
	Cleanup(func())
}) *EventRecorder {
	mock := &EventRecorder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// EventRecorder is an autogenerated mock type for the EventRecorder type
type EventRecorder struct {
	mock.Mock
}

type EventRecorder_Expecter struct {
	mock *mock.Mock
}

func (_m *EventRecorder) EXPECT() *EventRecorder_Expecter {
	return &EventRecorder_Expecter{mock: &_m.Mock}
}

// AnnotatedEventf provides a mock function for the type EventRecorder
func (_mock *EventRecorder) AnnotatedEventf(object runtime.Object, annotations map[string]string, eventtype string, reason string, messageFmt string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, object, annotations, eventtype, reason, messageFmt)
	_ca = append(_ca, args...)
	_mock.Called(_ca...)
	return
}

// EventRecorder_AnnotatedEventf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AnnotatedEventf'
type EventRecorder_AnnotatedEventf_Call struct {
	*mock.Call
}

// AnnotatedEventf is a helper method to define mock.On call
//   - object runtime.Object
//   - annotations map[string]string
//   - eventtype string
//   - reason string
//   - messageFmt string
//   - args ...interface{}
func (_e *EventRecorder_Expecter) AnnotatedEventf(object interface{}, annotations interface{}, eventtype interface{}, reason interface{}, messageFmt interface{}, args ...interface{}) *EventRecorder_AnnotatedEventf_Call {
	return &EventRecorder_AnnotatedEventf_Call{Call: _e.mock.On("AnnotatedEventf",
		append([]interface{}{object, annotations, eventtype, reason, messageFmt}, args...)...)}
}

func (_c *EventRecorder_AnnotatedEventf_Call) Run(run func(object runtime.Object, annotations map[string]string, eventtype string, reason string, messageFmt string, args ...interface{})) *EventRecorder_AnnotatedEventf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 runtime.Object
		if args[0] != nil {
			arg0 = args[0].(runtime.Object)
		}
		var arg1 map[string]string
		if args[1] != nil {
			arg1 = args[1].(map[string]string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		var arg4 string
		if args[4] != nil {
			arg4 = args[4].(string)
		}
		var arg5 []interface{}
		variadicArgs := make([]interface{}, len(args)-5)
		for i, a := range args[5:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		arg5 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
			arg5...,
		)
	})
	return _c
}

func (_c *EventRecorder_AnnotatedEventf_Call) Return() *EventRecorder_AnnotatedEventf_Call {
	_c.Call.Return()
	return _c
}

func (_c *EventRecorder_AnnotatedEventf_Call) RunAndReturn(run func(object runtime.Object, annotations map[string]string, eventtype string, reason string, messageFmt string, args ...interface{})) *EventRecorder_AnnotatedEventf_Call {
	_c.Run(run)
	return _c
}

// Event provides a mock function for the type EventRecorder
func (_mock *EventRecorder) Event(object runtime.Object, eventtype string, reason string, message string) {
	_mock.Called(object, eventtype, reason, message)
	return
}

// EventRecorder_Event_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Event'
type EventRecorder_Event_Call struct {
	*mock.Call
}

// Event is a helper method to define mock.On call
//   - object runtime.Object
//   - eventtype string
//   - reason string
//   - message string
func (_e *EventRecorder_Expecter) Event(object interface{}, eventtype interface{}, reason interface{}, message interface{}) *EventRecorder_Event_Call {
	return &EventRecorder_Event_Call{Call: _e.mock.On("Event", object, eventtype, reason, message)}
}

func (_c *EventRecorder_Event_Call) Run(run func(object runtime.Object, eventtype string, reason string, message string)) *EventRecorder_Event_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 runtime.Object
		if args[0] != nil {
			arg0 = args[0].(runtime.Object)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *EventRecorder_Event_Call) Return() *EventRecorder_Event_Call {
	_c.Call.Return()
	return _c
}

func (_c *EventRecorder_Event_Call) RunAndReturn(run func(object runtime.Object, eventtype string, reason string, message string)) *EventRecorder_Event_Call {
	_c.Run(run)
	return _c
}

// Eventf provides a mock function for the type EventRecorder
func (_mock *EventRecorder) Eventf(object runtime.Object, eventtype string, reason string, messageFmt string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, object, eventtype, reason, messageFmt)
	_ca = append(_ca, args...)
	_mock.Called(_ca...)
	return
}

// EventRecorder_Eventf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Eventf'
type EventRecorder_Eventf_Call struct {
	*mock.Call
}

// Eventf is a helper method to define mock.On call
//   - object runtime.Object
//   - eventtype string
//   - reason string
//   - messageFmt string
//   - args ...interface{}
func (_e *EventRecorder_Expecter) Eventf(object interface{}, eventtype interface{}, reason interface{}, messageFmt interface{}, args ...interface{}) *EventRecorder_Eventf_Call {
	return &EventRecorder_Eventf_Call{Call: _e.mock.On("Eventf",
		append([]interface{}{object, eventtype, reason, messageFmt}, args...)...)}
}

func (_c *EventRecorder_Eventf_Call) Run(run func(object runtime.Object, eventtype string, reason string, messageFmt string, args ...interface{})) *EventRecorder_Eventf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 runtime.Object
		if args[0] != nil {
			arg0 = args[0].(runtime.Object)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		var arg4 []interface{}
		variadicArgs := make([]interface{}, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		arg4 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4...,
		)
	})
	return _c
}

func (_c *EventRecorder_Eventf_Call) Return() *EventRecorder_Eventf_Call {
	_c.Call.Return()
	return _c
}

func (_c *EventRecorder_Eventf_Call) RunAndReturn(run func(object runtime.Object, eventtype string, reason string, messageFmt string, args ...interface{})) *EventRecorder_Eventf_Call {
	_c.Run(run)
	return _c
}
