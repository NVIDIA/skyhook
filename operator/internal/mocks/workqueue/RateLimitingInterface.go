/*
 * SPDX-FileCopyrightText: Copyright (c) 2025 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
 * SPDX-License-Identifier: Apache-2.0
 *
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package workqueue

import (
	"time"

	mock "github.com/stretchr/testify/mock"
)

// NewRateLimitingInterface creates a new instance of RateLimitingInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRateLimitingInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *RateLimitingInterface {
	mock := &RateLimitingInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// RateLimitingInterface is an autogenerated mock type for the RateLimitingInterface type
type RateLimitingInterface struct {
	mock.Mock
}

type RateLimitingInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *RateLimitingInterface) EXPECT() *RateLimitingInterface_Expecter {
	return &RateLimitingInterface_Expecter{mock: &_m.Mock}
}

// Add provides a mock function for the type RateLimitingInterface
func (_mock *RateLimitingInterface) Add(item any) {
	_mock.Called(item)
	return
}

// RateLimitingInterface_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type RateLimitingInterface_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - item any
func (_e *RateLimitingInterface_Expecter) Add(item interface{}) *RateLimitingInterface_Add_Call {
	return &RateLimitingInterface_Add_Call{Call: _e.mock.On("Add", item)}
}

func (_c *RateLimitingInterface_Add_Call) Run(run func(item any)) *RateLimitingInterface_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 any
		if args[0] != nil {
			arg0 = args[0].(any)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *RateLimitingInterface_Add_Call) Return() *RateLimitingInterface_Add_Call {
	_c.Call.Return()
	return _c
}

func (_c *RateLimitingInterface_Add_Call) RunAndReturn(run func(item any)) *RateLimitingInterface_Add_Call {
	_c.Run(run)
	return _c
}

// AddAfter provides a mock function for the type RateLimitingInterface
func (_mock *RateLimitingInterface) AddAfter(item any, duration time.Duration) {
	_mock.Called(item, duration)
	return
}

// RateLimitingInterface_AddAfter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddAfter'
type RateLimitingInterface_AddAfter_Call struct {
	*mock.Call
}

// AddAfter is a helper method to define mock.On call
//   - item any
//   - duration time.Duration
func (_e *RateLimitingInterface_Expecter) AddAfter(item interface{}, duration interface{}) *RateLimitingInterface_AddAfter_Call {
	return &RateLimitingInterface_AddAfter_Call{Call: _e.mock.On("AddAfter", item, duration)}
}

func (_c *RateLimitingInterface_AddAfter_Call) Run(run func(item any, duration time.Duration)) *RateLimitingInterface_AddAfter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 any
		if args[0] != nil {
			arg0 = args[0].(any)
		}
		var arg1 time.Duration
		if args[1] != nil {
			arg1 = args[1].(time.Duration)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *RateLimitingInterface_AddAfter_Call) Return() *RateLimitingInterface_AddAfter_Call {
	_c.Call.Return()
	return _c
}

func (_c *RateLimitingInterface_AddAfter_Call) RunAndReturn(run func(item any, duration time.Duration)) *RateLimitingInterface_AddAfter_Call {
	_c.Run(run)
	return _c
}

// AddRateLimited provides a mock function for the type RateLimitingInterface
func (_mock *RateLimitingInterface) AddRateLimited(item any) {
	_mock.Called(item)
	return
}

// RateLimitingInterface_AddRateLimited_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddRateLimited'
type RateLimitingInterface_AddRateLimited_Call struct {
	*mock.Call
}

// AddRateLimited is a helper method to define mock.On call
//   - item any
func (_e *RateLimitingInterface_Expecter) AddRateLimited(item interface{}) *RateLimitingInterface_AddRateLimited_Call {
	return &RateLimitingInterface_AddRateLimited_Call{Call: _e.mock.On("AddRateLimited", item)}
}

func (_c *RateLimitingInterface_AddRateLimited_Call) Run(run func(item any)) *RateLimitingInterface_AddRateLimited_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 any
		if args[0] != nil {
			arg0 = args[0].(any)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *RateLimitingInterface_AddRateLimited_Call) Return() *RateLimitingInterface_AddRateLimited_Call {
	_c.Call.Return()
	return _c
}

func (_c *RateLimitingInterface_AddRateLimited_Call) RunAndReturn(run func(item any)) *RateLimitingInterface_AddRateLimited_Call {
	_c.Run(run)
	return _c
}

// Done provides a mock function for the type RateLimitingInterface
func (_mock *RateLimitingInterface) Done(item any) {
	_mock.Called(item)
	return
}

// RateLimitingInterface_Done_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Done'
type RateLimitingInterface_Done_Call struct {
	*mock.Call
}

// Done is a helper method to define mock.On call
//   - item any
func (_e *RateLimitingInterface_Expecter) Done(item interface{}) *RateLimitingInterface_Done_Call {
	return &RateLimitingInterface_Done_Call{Call: _e.mock.On("Done", item)}
}

func (_c *RateLimitingInterface_Done_Call) Run(run func(item any)) *RateLimitingInterface_Done_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 any
		if args[0] != nil {
			arg0 = args[0].(any)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *RateLimitingInterface_Done_Call) Return() *RateLimitingInterface_Done_Call {
	_c.Call.Return()
	return _c
}

func (_c *RateLimitingInterface_Done_Call) RunAndReturn(run func(item any)) *RateLimitingInterface_Done_Call {
	_c.Run(run)
	return _c
}

// Forget provides a mock function for the type RateLimitingInterface
func (_mock *RateLimitingInterface) Forget(item any) {
	_mock.Called(item)
	return
}

// RateLimitingInterface_Forget_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Forget'
type RateLimitingInterface_Forget_Call struct {
	*mock.Call
}

// Forget is a helper method to define mock.On call
//   - item any
func (_e *RateLimitingInterface_Expecter) Forget(item interface{}) *RateLimitingInterface_Forget_Call {
	return &RateLimitingInterface_Forget_Call{Call: _e.mock.On("Forget", item)}
}

func (_c *RateLimitingInterface_Forget_Call) Run(run func(item any)) *RateLimitingInterface_Forget_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 any
		if args[0] != nil {
			arg0 = args[0].(any)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *RateLimitingInterface_Forget_Call) Return() *RateLimitingInterface_Forget_Call {
	_c.Call.Return()
	return _c
}

func (_c *RateLimitingInterface_Forget_Call) RunAndReturn(run func(item any)) *RateLimitingInterface_Forget_Call {
	_c.Run(run)
	return _c
}

// Get provides a mock function for the type RateLimitingInterface
func (_mock *RateLimitingInterface) Get() (any, bool) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 any
	var r1 bool
	if returnFunc, ok := ret.Get(0).(func() (any, bool)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() any); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(any)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() bool); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Get(1).(bool)
	}
	return r0, r1
}

// RateLimitingInterface_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type RateLimitingInterface_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
func (_e *RateLimitingInterface_Expecter) Get() *RateLimitingInterface_Get_Call {
	return &RateLimitingInterface_Get_Call{Call: _e.mock.On("Get")}
}

func (_c *RateLimitingInterface_Get_Call) Run(run func()) *RateLimitingInterface_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RateLimitingInterface_Get_Call) Return(item any, shutdown bool) *RateLimitingInterface_Get_Call {
	_c.Call.Return(item, shutdown)
	return _c
}

func (_c *RateLimitingInterface_Get_Call) RunAndReturn(run func() (any, bool)) *RateLimitingInterface_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Len provides a mock function for the type RateLimitingInterface
func (_mock *RateLimitingInterface) Len() int {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Len")
	}

	var r0 int
	if returnFunc, ok := ret.Get(0).(func() int); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(int)
	}
	return r0
}

// RateLimitingInterface_Len_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Len'
type RateLimitingInterface_Len_Call struct {
	*mock.Call
}

// Len is a helper method to define mock.On call
func (_e *RateLimitingInterface_Expecter) Len() *RateLimitingInterface_Len_Call {
	return &RateLimitingInterface_Len_Call{Call: _e.mock.On("Len")}
}

func (_c *RateLimitingInterface_Len_Call) Run(run func()) *RateLimitingInterface_Len_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RateLimitingInterface_Len_Call) Return(n int) *RateLimitingInterface_Len_Call {
	_c.Call.Return(n)
	return _c
}

func (_c *RateLimitingInterface_Len_Call) RunAndReturn(run func() int) *RateLimitingInterface_Len_Call {
	_c.Call.Return(run)
	return _c
}

// NumRequeues provides a mock function for the type RateLimitingInterface
func (_mock *RateLimitingInterface) NumRequeues(item any) int {
	ret := _mock.Called(item)

	if len(ret) == 0 {
		panic("no return value specified for NumRequeues")
	}

	var r0 int
	if returnFunc, ok := ret.Get(0).(func(any) int); ok {
		r0 = returnFunc(item)
	} else {
		r0 = ret.Get(0).(int)
	}
	return r0
}

// RateLimitingInterface_NumRequeues_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NumRequeues'
type RateLimitingInterface_NumRequeues_Call struct {
	*mock.Call
}

// NumRequeues is a helper method to define mock.On call
//   - item any
func (_e *RateLimitingInterface_Expecter) NumRequeues(item interface{}) *RateLimitingInterface_NumRequeues_Call {
	return &RateLimitingInterface_NumRequeues_Call{Call: _e.mock.On("NumRequeues", item)}
}

func (_c *RateLimitingInterface_NumRequeues_Call) Run(run func(item any)) *RateLimitingInterface_NumRequeues_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 any
		if args[0] != nil {
			arg0 = args[0].(any)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *RateLimitingInterface_NumRequeues_Call) Return(n int) *RateLimitingInterface_NumRequeues_Call {
	_c.Call.Return(n)
	return _c
}

func (_c *RateLimitingInterface_NumRequeues_Call) RunAndReturn(run func(item any) int) *RateLimitingInterface_NumRequeues_Call {
	_c.Call.Return(run)
	return _c
}

// ShutDown provides a mock function for the type RateLimitingInterface
func (_mock *RateLimitingInterface) ShutDown() {
	_mock.Called()
	return
}

// RateLimitingInterface_ShutDown_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ShutDown'
type RateLimitingInterface_ShutDown_Call struct {
	*mock.Call
}

// ShutDown is a helper method to define mock.On call
func (_e *RateLimitingInterface_Expecter) ShutDown() *RateLimitingInterface_ShutDown_Call {
	return &RateLimitingInterface_ShutDown_Call{Call: _e.mock.On("ShutDown")}
}

func (_c *RateLimitingInterface_ShutDown_Call) Run(run func()) *RateLimitingInterface_ShutDown_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RateLimitingInterface_ShutDown_Call) Return() *RateLimitingInterface_ShutDown_Call {
	_c.Call.Return()
	return _c
}

func (_c *RateLimitingInterface_ShutDown_Call) RunAndReturn(run func()) *RateLimitingInterface_ShutDown_Call {
	_c.Run(run)
	return _c
}

// ShutDownWithDrain provides a mock function for the type RateLimitingInterface
func (_mock *RateLimitingInterface) ShutDownWithDrain() {
	_mock.Called()
	return
}

// RateLimitingInterface_ShutDownWithDrain_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ShutDownWithDrain'
type RateLimitingInterface_ShutDownWithDrain_Call struct {
	*mock.Call
}

// ShutDownWithDrain is a helper method to define mock.On call
func (_e *RateLimitingInterface_Expecter) ShutDownWithDrain() *RateLimitingInterface_ShutDownWithDrain_Call {
	return &RateLimitingInterface_ShutDownWithDrain_Call{Call: _e.mock.On("ShutDownWithDrain")}
}

func (_c *RateLimitingInterface_ShutDownWithDrain_Call) Run(run func()) *RateLimitingInterface_ShutDownWithDrain_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RateLimitingInterface_ShutDownWithDrain_Call) Return() *RateLimitingInterface_ShutDownWithDrain_Call {
	_c.Call.Return()
	return _c
}

func (_c *RateLimitingInterface_ShutDownWithDrain_Call) RunAndReturn(run func()) *RateLimitingInterface_ShutDownWithDrain_Call {
	_c.Run(run)
	return _c
}

// ShuttingDown provides a mock function for the type RateLimitingInterface
func (_mock *RateLimitingInterface) ShuttingDown() bool {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ShuttingDown")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func() bool); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// RateLimitingInterface_ShuttingDown_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ShuttingDown'
type RateLimitingInterface_ShuttingDown_Call struct {
	*mock.Call
}

// ShuttingDown is a helper method to define mock.On call
func (_e *RateLimitingInterface_Expecter) ShuttingDown() *RateLimitingInterface_ShuttingDown_Call {
	return &RateLimitingInterface_ShuttingDown_Call{Call: _e.mock.On("ShuttingDown")}
}

func (_c *RateLimitingInterface_ShuttingDown_Call) Run(run func()) *RateLimitingInterface_ShuttingDown_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RateLimitingInterface_ShuttingDown_Call) Return(b bool) *RateLimitingInterface_ShuttingDown_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *RateLimitingInterface_ShuttingDown_Call) RunAndReturn(run func() bool) *RateLimitingInterface_ShuttingDown_Call {
	_c.Call.Return(run)
	return _c
}
