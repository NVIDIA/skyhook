/*
 * LICENSE START
 *
 *    Copyright (c) NVIDIA CORPORATION.  All rights reserved.
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 *
 * LICENSE END
 */

// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package workqueue

import (
	"time"

	mock "github.com/stretchr/testify/mock"
)

// NewTypedRateLimitingInterface creates a new instance of TypedRateLimitingInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTypedRateLimitingInterface[T comparable](t interface {
	mock.TestingT
	Cleanup(func())
}) *TypedRateLimitingInterface[T] {
	mock := &TypedRateLimitingInterface[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// TypedRateLimitingInterface is an autogenerated mock type for the TypedRateLimitingInterface type
type TypedRateLimitingInterface[T comparable] struct {
	mock.Mock
}

type TypedRateLimitingInterface_Expecter[T comparable] struct {
	mock *mock.Mock
}

func (_m *TypedRateLimitingInterface[T]) EXPECT() *TypedRateLimitingInterface_Expecter[T] {
	return &TypedRateLimitingInterface_Expecter[T]{mock: &_m.Mock}
}

// Add provides a mock function for the type TypedRateLimitingInterface
func (_mock *TypedRateLimitingInterface[T]) Add(item T) {
	_mock.Called(item)
	return
}

// TypedRateLimitingInterface_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type TypedRateLimitingInterface_Add_Call[T comparable] struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - item T
func (_e *TypedRateLimitingInterface_Expecter[T]) Add(item interface{}) *TypedRateLimitingInterface_Add_Call[T] {
	return &TypedRateLimitingInterface_Add_Call[T]{Call: _e.mock.On("Add", item)}
}

func (_c *TypedRateLimitingInterface_Add_Call[T]) Run(run func(item T)) *TypedRateLimitingInterface_Add_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 T
		if args[0] != nil {
			arg0 = args[0].(T)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *TypedRateLimitingInterface_Add_Call[T]) Return() *TypedRateLimitingInterface_Add_Call[T] {
	_c.Call.Return()
	return _c
}

func (_c *TypedRateLimitingInterface_Add_Call[T]) RunAndReturn(run func(item T)) *TypedRateLimitingInterface_Add_Call[T] {
	_c.Run(run)
	return _c
}

// AddAfter provides a mock function for the type TypedRateLimitingInterface
func (_mock *TypedRateLimitingInterface[T]) AddAfter(item T, duration time.Duration) {
	_mock.Called(item, duration)
	return
}

// TypedRateLimitingInterface_AddAfter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddAfter'
type TypedRateLimitingInterface_AddAfter_Call[T comparable] struct {
	*mock.Call
}

// AddAfter is a helper method to define mock.On call
//   - item T
//   - duration time.Duration
func (_e *TypedRateLimitingInterface_Expecter[T]) AddAfter(item interface{}, duration interface{}) *TypedRateLimitingInterface_AddAfter_Call[T] {
	return &TypedRateLimitingInterface_AddAfter_Call[T]{Call: _e.mock.On("AddAfter", item, duration)}
}

func (_c *TypedRateLimitingInterface_AddAfter_Call[T]) Run(run func(item T, duration time.Duration)) *TypedRateLimitingInterface_AddAfter_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 T
		if args[0] != nil {
			arg0 = args[0].(T)
		}
		var arg1 time.Duration
		if args[1] != nil {
			arg1 = args[1].(time.Duration)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *TypedRateLimitingInterface_AddAfter_Call[T]) Return() *TypedRateLimitingInterface_AddAfter_Call[T] {
	_c.Call.Return()
	return _c
}

func (_c *TypedRateLimitingInterface_AddAfter_Call[T]) RunAndReturn(run func(item T, duration time.Duration)) *TypedRateLimitingInterface_AddAfter_Call[T] {
	_c.Run(run)
	return _c
}

// AddRateLimited provides a mock function for the type TypedRateLimitingInterface
func (_mock *TypedRateLimitingInterface[T]) AddRateLimited(item T) {
	_mock.Called(item)
	return
}

// TypedRateLimitingInterface_AddRateLimited_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddRateLimited'
type TypedRateLimitingInterface_AddRateLimited_Call[T comparable] struct {
	*mock.Call
}

// AddRateLimited is a helper method to define mock.On call
//   - item T
func (_e *TypedRateLimitingInterface_Expecter[T]) AddRateLimited(item interface{}) *TypedRateLimitingInterface_AddRateLimited_Call[T] {
	return &TypedRateLimitingInterface_AddRateLimited_Call[T]{Call: _e.mock.On("AddRateLimited", item)}
}

func (_c *TypedRateLimitingInterface_AddRateLimited_Call[T]) Run(run func(item T)) *TypedRateLimitingInterface_AddRateLimited_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 T
		if args[0] != nil {
			arg0 = args[0].(T)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *TypedRateLimitingInterface_AddRateLimited_Call[T]) Return() *TypedRateLimitingInterface_AddRateLimited_Call[T] {
	_c.Call.Return()
	return _c
}

func (_c *TypedRateLimitingInterface_AddRateLimited_Call[T]) RunAndReturn(run func(item T)) *TypedRateLimitingInterface_AddRateLimited_Call[T] {
	_c.Run(run)
	return _c
}

// Done provides a mock function for the type TypedRateLimitingInterface
func (_mock *TypedRateLimitingInterface[T]) Done(item T) {
	_mock.Called(item)
	return
}

// TypedRateLimitingInterface_Done_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Done'
type TypedRateLimitingInterface_Done_Call[T comparable] struct {
	*mock.Call
}

// Done is a helper method to define mock.On call
//   - item T
func (_e *TypedRateLimitingInterface_Expecter[T]) Done(item interface{}) *TypedRateLimitingInterface_Done_Call[T] {
	return &TypedRateLimitingInterface_Done_Call[T]{Call: _e.mock.On("Done", item)}
}

func (_c *TypedRateLimitingInterface_Done_Call[T]) Run(run func(item T)) *TypedRateLimitingInterface_Done_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 T
		if args[0] != nil {
			arg0 = args[0].(T)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *TypedRateLimitingInterface_Done_Call[T]) Return() *TypedRateLimitingInterface_Done_Call[T] {
	_c.Call.Return()
	return _c
}

func (_c *TypedRateLimitingInterface_Done_Call[T]) RunAndReturn(run func(item T)) *TypedRateLimitingInterface_Done_Call[T] {
	_c.Run(run)
	return _c
}

// Forget provides a mock function for the type TypedRateLimitingInterface
func (_mock *TypedRateLimitingInterface[T]) Forget(item T) {
	_mock.Called(item)
	return
}

// TypedRateLimitingInterface_Forget_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Forget'
type TypedRateLimitingInterface_Forget_Call[T comparable] struct {
	*mock.Call
}

// Forget is a helper method to define mock.On call
//   - item T
func (_e *TypedRateLimitingInterface_Expecter[T]) Forget(item interface{}) *TypedRateLimitingInterface_Forget_Call[T] {
	return &TypedRateLimitingInterface_Forget_Call[T]{Call: _e.mock.On("Forget", item)}
}

func (_c *TypedRateLimitingInterface_Forget_Call[T]) Run(run func(item T)) *TypedRateLimitingInterface_Forget_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 T
		if args[0] != nil {
			arg0 = args[0].(T)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *TypedRateLimitingInterface_Forget_Call[T]) Return() *TypedRateLimitingInterface_Forget_Call[T] {
	_c.Call.Return()
	return _c
}

func (_c *TypedRateLimitingInterface_Forget_Call[T]) RunAndReturn(run func(item T)) *TypedRateLimitingInterface_Forget_Call[T] {
	_c.Run(run)
	return _c
}

// Get provides a mock function for the type TypedRateLimitingInterface
func (_mock *TypedRateLimitingInterface[T]) Get() (T, bool) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 T
	var r1 bool
	if returnFunc, ok := ret.Get(0).(func() (T, bool)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() T); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(T)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() bool); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Get(1).(bool)
	}
	return r0, r1
}

// TypedRateLimitingInterface_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type TypedRateLimitingInterface_Get_Call[T comparable] struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
func (_e *TypedRateLimitingInterface_Expecter[T]) Get() *TypedRateLimitingInterface_Get_Call[T] {
	return &TypedRateLimitingInterface_Get_Call[T]{Call: _e.mock.On("Get")}
}

func (_c *TypedRateLimitingInterface_Get_Call[T]) Run(run func()) *TypedRateLimitingInterface_Get_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TypedRateLimitingInterface_Get_Call[T]) Return(item T, shutdown bool) *TypedRateLimitingInterface_Get_Call[T] {
	_c.Call.Return(item, shutdown)
	return _c
}

func (_c *TypedRateLimitingInterface_Get_Call[T]) RunAndReturn(run func() (T, bool)) *TypedRateLimitingInterface_Get_Call[T] {
	_c.Call.Return(run)
	return _c
}

// Len provides a mock function for the type TypedRateLimitingInterface
func (_mock *TypedRateLimitingInterface[T]) Len() int {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Len")
	}

	var r0 int
	if returnFunc, ok := ret.Get(0).(func() int); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(int)
	}
	return r0
}

// TypedRateLimitingInterface_Len_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Len'
type TypedRateLimitingInterface_Len_Call[T comparable] struct {
	*mock.Call
}

// Len is a helper method to define mock.On call
func (_e *TypedRateLimitingInterface_Expecter[T]) Len() *TypedRateLimitingInterface_Len_Call[T] {
	return &TypedRateLimitingInterface_Len_Call[T]{Call: _e.mock.On("Len")}
}

func (_c *TypedRateLimitingInterface_Len_Call[T]) Run(run func()) *TypedRateLimitingInterface_Len_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TypedRateLimitingInterface_Len_Call[T]) Return(n int) *TypedRateLimitingInterface_Len_Call[T] {
	_c.Call.Return(n)
	return _c
}

func (_c *TypedRateLimitingInterface_Len_Call[T]) RunAndReturn(run func() int) *TypedRateLimitingInterface_Len_Call[T] {
	_c.Call.Return(run)
	return _c
}

// NumRequeues provides a mock function for the type TypedRateLimitingInterface
func (_mock *TypedRateLimitingInterface[T]) NumRequeues(item T) int {
	ret := _mock.Called(item)

	if len(ret) == 0 {
		panic("no return value specified for NumRequeues")
	}

	var r0 int
	if returnFunc, ok := ret.Get(0).(func(T) int); ok {
		r0 = returnFunc(item)
	} else {
		r0 = ret.Get(0).(int)
	}
	return r0
}

// TypedRateLimitingInterface_NumRequeues_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NumRequeues'
type TypedRateLimitingInterface_NumRequeues_Call[T comparable] struct {
	*mock.Call
}

// NumRequeues is a helper method to define mock.On call
//   - item T
func (_e *TypedRateLimitingInterface_Expecter[T]) NumRequeues(item interface{}) *TypedRateLimitingInterface_NumRequeues_Call[T] {
	return &TypedRateLimitingInterface_NumRequeues_Call[T]{Call: _e.mock.On("NumRequeues", item)}
}

func (_c *TypedRateLimitingInterface_NumRequeues_Call[T]) Run(run func(item T)) *TypedRateLimitingInterface_NumRequeues_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 T
		if args[0] != nil {
			arg0 = args[0].(T)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *TypedRateLimitingInterface_NumRequeues_Call[T]) Return(n int) *TypedRateLimitingInterface_NumRequeues_Call[T] {
	_c.Call.Return(n)
	return _c
}

func (_c *TypedRateLimitingInterface_NumRequeues_Call[T]) RunAndReturn(run func(item T) int) *TypedRateLimitingInterface_NumRequeues_Call[T] {
	_c.Call.Return(run)
	return _c
}

// ShutDown provides a mock function for the type TypedRateLimitingInterface
func (_mock *TypedRateLimitingInterface[T]) ShutDown() {
	_mock.Called()
	return
}

// TypedRateLimitingInterface_ShutDown_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ShutDown'
type TypedRateLimitingInterface_ShutDown_Call[T comparable] struct {
	*mock.Call
}

// ShutDown is a helper method to define mock.On call
func (_e *TypedRateLimitingInterface_Expecter[T]) ShutDown() *TypedRateLimitingInterface_ShutDown_Call[T] {
	return &TypedRateLimitingInterface_ShutDown_Call[T]{Call: _e.mock.On("ShutDown")}
}

func (_c *TypedRateLimitingInterface_ShutDown_Call[T]) Run(run func()) *TypedRateLimitingInterface_ShutDown_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TypedRateLimitingInterface_ShutDown_Call[T]) Return() *TypedRateLimitingInterface_ShutDown_Call[T] {
	_c.Call.Return()
	return _c
}

func (_c *TypedRateLimitingInterface_ShutDown_Call[T]) RunAndReturn(run func()) *TypedRateLimitingInterface_ShutDown_Call[T] {
	_c.Run(run)
	return _c
}

// ShutDownWithDrain provides a mock function for the type TypedRateLimitingInterface
func (_mock *TypedRateLimitingInterface[T]) ShutDownWithDrain() {
	_mock.Called()
	return
}

// TypedRateLimitingInterface_ShutDownWithDrain_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ShutDownWithDrain'
type TypedRateLimitingInterface_ShutDownWithDrain_Call[T comparable] struct {
	*mock.Call
}

// ShutDownWithDrain is a helper method to define mock.On call
func (_e *TypedRateLimitingInterface_Expecter[T]) ShutDownWithDrain() *TypedRateLimitingInterface_ShutDownWithDrain_Call[T] {
	return &TypedRateLimitingInterface_ShutDownWithDrain_Call[T]{Call: _e.mock.On("ShutDownWithDrain")}
}

func (_c *TypedRateLimitingInterface_ShutDownWithDrain_Call[T]) Run(run func()) *TypedRateLimitingInterface_ShutDownWithDrain_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TypedRateLimitingInterface_ShutDownWithDrain_Call[T]) Return() *TypedRateLimitingInterface_ShutDownWithDrain_Call[T] {
	_c.Call.Return()
	return _c
}

func (_c *TypedRateLimitingInterface_ShutDownWithDrain_Call[T]) RunAndReturn(run func()) *TypedRateLimitingInterface_ShutDownWithDrain_Call[T] {
	_c.Run(run)
	return _c
}

// ShuttingDown provides a mock function for the type TypedRateLimitingInterface
func (_mock *TypedRateLimitingInterface[T]) ShuttingDown() bool {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ShuttingDown")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func() bool); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// TypedRateLimitingInterface_ShuttingDown_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ShuttingDown'
type TypedRateLimitingInterface_ShuttingDown_Call[T comparable] struct {
	*mock.Call
}

// ShuttingDown is a helper method to define mock.On call
func (_e *TypedRateLimitingInterface_Expecter[T]) ShuttingDown() *TypedRateLimitingInterface_ShuttingDown_Call[T] {
	return &TypedRateLimitingInterface_ShuttingDown_Call[T]{Call: _e.mock.On("ShuttingDown")}
}

func (_c *TypedRateLimitingInterface_ShuttingDown_Call[T]) Run(run func()) *TypedRateLimitingInterface_ShuttingDown_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TypedRateLimitingInterface_ShuttingDown_Call[T]) Return(b bool) *TypedRateLimitingInterface_ShuttingDown_Call[T] {
	_c.Call.Return(b)
	return _c
}

func (_c *TypedRateLimitingInterface_ShuttingDown_Call[T]) RunAndReturn(run func() bool) *TypedRateLimitingInterface_ShuttingDown_Call[T] {
	_c.Call.Return(run)
	return _c
}
